Program : ExtDefList 
;

ExtDefList : ExtDef ExtDefList 
	| /*empty*/
;

ExtDef : Specifier ExtDecList SEMI 
	| Specifier SEMI 
	| Specifier FunDec CompSt 
;

ExtDecList : {t = base_t} VarDec {enter(id, t)} 
	| {t = base_t} VarDec {enter(id, t)} COMMA ExtDecList 
;

Specifier : TYPE {base_t = TYPE.val}
	| StructSpecifier 
;

StructSpecifier : #STRUCT OptTag LC {init struct; pushsym} DefList RC {popsym if id!=NULL enter(id, t) base_t = struct t} 
	 | #STRUCT Tag {lookup(id) base_t = struct tag} 
;
OptTag : #/* empty */ {id = NULL}
	| #ID {id = ID}
;

Tag : #ID {id = ID}
;

VarDec : ID {id=ID.val, lookup()}
	| VarDec LB INT RB {t = array(INT, t)}
;

FunDec :  ID LP VarList RP 
	| ID LP RP 
;

VarList : ParamDec COMMA VarList 
	| ParamDec 
;

ParamDec : Specifier VarDec 
;

CompSt : LC DefList StmtList RC 
;

StmtList : /* empty */ 
	| Stmt StmtList 
;

Stmt : Exp SEMI
	| CompSt 
	| RETURN Exp SEMI
	| IF LP Exp RP Stmt %prec LOWER_THAN_ELSE 
	| IF LP Exp RP Stmt ELSE Stmt 
	| WHILE LP Exp RP Stmt 
;

DefList : /* empty */ 
	| Def DefList 
;

Def : Specifier DecList SEMI 
;

DecList : #{t = base_t} Dec 
	| #{t = base_t} Dec {enter(id, t)} COMMA DecList 
;

Dec : VarDec 
	| VarDec ASSIGNOP Exp 
;

Exp : {has_ID=f} Exp {has_ID?, left_t = t} ASSIGNOP Exp {t = left_t} 
	| Exp {t is int} AND Exp {t is int} 
	| Exp {t is int} OR Exp {t is int} 
	| Exp {t is int} RELOP Exp {t is int}
	| Exp {t is BASIC} PLUS Exp {t is BASIC} 
	| Exp {t is BASIC} MINUS Exp {t is BASIC}  
	| Exp {t is BASIC} STAR Exp {t is BASIC} 
	| Exp {t is BASIC} DIV Exp {t is BASIC}
	| LP Exp RP 
	| MINUS Exp {t is BASIC} 
	| NOT Exp {t is int}
	| ID {lookup; is func} LP Args RP 
	| Exp {t is arr} LB Exp {t is int} RB {t = arr.sub}
	| Exp {t is struct} DOT ID {t = t.partner} 
	| ID {lookup; t, hasID} 
	| INT {t} 
	| FLOAT {t} 
;

Args : Exp COMMA Args 
	| Exp 
;